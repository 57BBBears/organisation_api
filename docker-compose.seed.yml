services:
  api:
    container_name: api
    build:
      context: .
    entrypoint: ["./docker-entrypoint.sh"]
    environment:
      DATABASE_HOST: ${TEST_DATABASE_HOST:-postgres}
      DATABASE_DB: ${TEST_DATABASE_DB:-organisations_test}
      DATABASE_USER: ${TEST_DATABASE_USER:-test}
      DATABASE_PASSWORD: ${TEST_DATABASE_PASSWORD:-test}
      API_SECRET_KEY: ${API_SECRET_KEY:-test}
      SEED_DB: ${SEED_DB:-true}
      SEED_ORGANISATION_NUM: ${SEED_ORGANISATION_NUM:-50}
      SEED_BUILDING_NUM: ${SEED_BUILDING_NUM:-20}
    ports:
      - 8000:8000
    restart: unless-stopped
    networks:
      - app
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: postgres
    image: postgis/postgis:17-master
    environment:
      POSTGRES_DB: ${TEST_DATABASE_DB:-organisations_test}
      POSTGRES_USER: ${TEST_DATABASE_USER:-test}
      POSTGRES_PASSWORD: ${TEST_DATABASE_PASSWORD:-test}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - seed_database:/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    networks:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_DATABASE_USER:-test} -d ${TEST_DATABASE_DB:-organisations_test}"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 10s

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:7.8
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-test@test.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-test}
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - ${PGADMIN_PORT:-5050}:80
    restart: unless-stopped
    networks:
      - app

volumes:
  seed_database:
  pgadmin:

networks:
  app:
    driver: bridge